#!/usr/bin/env python
#
# syncit
#
# Allows you to sync a particular git branch to a
# specific directory (on a remote machine).
#
# Recursively looks upward for an ini-style config.
# Once the config is located, it grabs the branch
# list and, depending on what branch you're currently
# sitting on, will rsync the contents of the project
# to a specific directory.
#
# It's a good idea to add the config to your .gitignore.
#
# Example usage:
#   git checkout master
#   syncit
#   git checkout experiment
#   syncit
#
# Example project.cfg:
#   [branches]
#   master: host:/webroot/project/branches/dev
#   experiment: host:/webroot/project/branches/experiment
#   *: host:/webroot/project/branches/other_dev
#

import os
import os.path
import subprocess

def sync_to(source, dest):
    subprocess.call('cd %s && rsync -vPzrtl --delete --exclude=".git" $(pwd)/* %s' % (source, dest), shell=True)

def config_path(file_name, path='.'):
    path  = os.path.abspath(path)
    files = [x for x in os.listdir(path) if os.path.isfile("%s/%s" % (path, x))]

    if file_name in files:
        return os.path.dirname("%s/%s" % (path, file_name))
    elif path == '/':
        return None
    else:
        return config_path(file_name, os.path.join(path, os.pardir))

if __name__ == "__main__":
    config_dir = config_path(".syncit")

    if config_dir:
        try:
            f        = open(config_dir + "/.syncit")
            location = f.readline()

            sync_to(config_dir, location)

        except IOError as e:
            print 'No .syncit file found.'
            exit(1)
    else:
        print 'No .syncit file found.'
        exit(1)
